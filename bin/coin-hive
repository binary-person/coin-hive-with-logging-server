#!/usr/bin/env node
'use strict';
require("babel-core/register");
require("babel-polyfill");

var getMinerDataRpc = function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(miner) {
    var defaults = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.t0 = Object;
            _context3.next = 3;
            return miner.rpc('getHashesPerSecond');

          case 3:
            _context3.t1 = _context3.sent;
            _context3.next = 6;
            return miner.rpc('getTotalHashes');

          case 6:
            _context3.t2 = _context3.sent;
            _context3.next = 9;
            return miner.rpc('getAcceptedHashes');

          case 9:
            _context3.t3 = _context3.sent;
            _context3.t4 = {
              hashesPerSecond: _context3.t1,
              totalHashes: _context3.t2,
              acceptedHashes: _context3.t3
            };
            _context3.t5 = defaults;
            return _context3.abrupt('return', _context3.t0.assign.call(_context3.t0, _context3.t4, _context3.t5));

          case 13:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));

  return function getMinerDataRpc(_x3) {
    return _ref3.apply(this, arguments);
  };
}();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var CoinHive = require('../src');
var argv = require('minimist')(process.argv.slice(2));
var defaults = require('../config/defaults');
var logUpdate = require('log-update');
var Table = require('tty-table');
var spinner = require('elegant-spinner')();
var readline = require('readline');

var express = require('express');
var request = require('request');
var app = express();

var hoursToClearLog = 48; // If we didn't clear the log, the server will have an overload because of the loggingHtml taking up too much memory
var port = 8080;
var adjustMinutes = -5 * 60; // This is when other times are in UTC or CST, This is a alternative to using the package 'Time' which is really frustrating
var keepAliveUrl = "https://mydockerapp-asdgrw.now.sh"; // Sometimes, services like heroku shutdown after a period of time. If we set an interval requesting the resource...

var timesCleared = 0;
var clearLogFlag = 1; // 1 = enabled, 0 = disabled
var clearLogInterval;
var s = " : "; //just a handy string seperator
var ss = "\n<br>\n"; //the super seperator
var b = "\n<br><br>\n"; //a new line in html language
var loggingHtml = b + getDateString() + s + "Started Logging" + b + "Date Format is in: Month/Day/Year, Hours:Minutes:Seconds AM/PM";
var wrapTopHtml = "<!DOCTYPE html>\n<html><head><title>Docker App</title></head>\n";
var optionsHtml = "<a href='/'>Main</a><br><a href='/auto'>Auto Refresh</a><br><a href='/disableLogging'>Disable Logging</a><br><a href='/enableLogging'>Enable Logging</a><br><a href='/clearLog'>Clear Log</a><br><br>\n";
var wrapBottomHtml = "\n</body></html>";

function updateLog(logText) {
  loggingHtml = getDateString() + s + logText + b + loggingHtml;
}

function clearLog() {
  timesCleared = timesCleared + 1;
  loggingHtml = b + getDateString() + s + timesCleared + " logs have been cleared" + b + "Date Format is in: Month/Day/Year, Hours:Minutes:Seconds AM/PM";
}

function getDateString() {
  var date = new Date();
  date.setTime(new Date().getTime() + adjustMinutes * 60 * 1000);
  return date.toLocaleString('en-US', { hour12: true });
}

function disableClearLog() {
  if (clearLogFlag == 1) {
    clearInterval(clearLogInterval);
    clearLogFlag = 0;
    return "Disabled";
  } else {
    return "Already been disabled!";
  }
}

function enableClearLog() {
  if (clearLogFlag == 0) {
    clearLogInterval = setInterval(function () {
      clearLog();
      clearLogFlag = 1;
    }, hoursToClearLog * 3600000);
    clearLogFlag = 1;
    return "Enabled";
  } else {
    return "Already been enabled!";
  }
}

function manualClearLog() {
  clearLog();
  return "Cleared!";
}

function get(url) {
  var source;
  request({ url: url }, function (error, response, body) {
    source = body;
  });
  while (source === undefined) {
    require('deasync').runLoopOnce();
  }
  return source;

  // var request = require('sync-request');
  // var res = request('GET', url);
  // return res.body.toString('utf-8');
}

app.get('/', function (req, res) {
  return res.send(wrapTopHtml + optionsHtml + loggingHtml + wrapBottomHtml);
});
app.get('/auto', function (req, res) {
  return res.send(loggingHtml + "<script>setTimeout(function(){window.location.reload()}, 0);</script>");
});
app.get('/enableLogging', function (req, res) {
  return res.send(enableClearLog());
});
app.get('/disableLogging', function (req, res) {
  return res.send(disableClearLog());
});
app.get('/clearLog', function (req, res) {
  return res.send(manualClearLog());
});
app.get('/url', function (req, res) {
  var url = req.query.url;
  if (url !== "" && url !== undefined && url !== "undefined") {
    keepAliveUrl = url;
    res.send('Successfully changed request url to ' + keepAliveUrl);
  } else {
    res.send('You gave me this: {' + url + "} so I'll just say, the current url is " + keepAliveUrl);
  }
});

app.listen(port, function () {
  console.log('Logging Server listening at ' + port);
});

if (keepAliveUrl !== "") {
  setInterval(function () {
    get(keepAliveUrl);
    updateLog(ss + 'Current Url: ' + keepAliveUrl);
    console.log(keepAliveUrl);
  }, 30000);
}

if (clearLogFlag == 1) {
  clearLogInterval = setInterval(function () {
    clearLog();
    clearLogFlag = 1;
  }, hoursToClearLog * 3600000);
}

////////////////////////

function help() {
  var text = require('fs').createReadStream(__dirname + '/help');
  text.pipe(process.stderr);
  text.on('close', function () {
    return process.exit(1);
  });
}

if (argv.help || argv.h) {
  help();
  // return;
}

var stratumPoolMessage = '';
var siteKeyMessage = 'Site key: ';

_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
  var siteKey, options, poolHost, poolPort, poolPass, miner, log;
  return regeneratorRuntime.wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          siteKey = argv._[0] || process.env.COINHIVE_SITE_KEY;


          siteKeyMessage += siteKey;

          if (siteKey) {
            _context2.next = 6;
            break;
          }

          console.error('\nNo site key found, please set environment "COINHIVE_SITE_KEY" or give an argument to the binary\n');
          help();
          return _context2.abrupt('return');

        case 6:

          logUpdate('Initializing...');

          options = {
            interval: argv.interval || process.env.COINHIVE_INTERVAL || defaults.interval,
            port: argv.port || process.env.COINHIVE_PORT || defaults.port,
            host: argv.host || process.env.COINHIVE_HOST || defaults.host,
            threads: argv.threads || process.env.COINHIVE_THREADS || defaults.threads,
            throttle: argv.throttle || process.env.COINHIVE_THROTTLE || defaults.throttle,
            proxy: argv.proxy || process.env.COINHIVE_PROXY || defaults.proxy,
            username: argv.username || process.env.COINHIVE_USERNAME || defaults.username,
            puppeteerUrl: argv['puppeteer-url'] || process.env.COINHIVE_PUPPETEER_URL || defaults.puppeteerUrl,
            minerUrl: argv['miner-url'] || process.env.COINHIVE_MINER_URL || defaults.minerUrl,
            pool: defaults.pool,
            devFee: argv['dev-fee'] || process.env.COINHIVE_DEV_FEE || defaults.devFee
          };
          poolHost = argv['pool-host'] || process.env.COINHIVE_POOL_HOST || null;
          poolPort = argv['pool-port'] || process.env.COINHIVE_POOL_PORT || null;
          poolPass = argv['pool-pass'] || process.env.COINHIVE_POOL_PASS || null;

          if (!(poolHost || poolPort)) {
            _context2.next = 23;
            break;
          }

          if (poolHost) {
            _context2.next = 16;
            break;
          }

          console.error('\nNo pool host found, please set environment "COINHIVE_POOL_HOST" or give a --pool-host argument to the binary\n');
          help();
          return _context2.abrupt('return');

        case 16:
          if (poolPort) {
            _context2.next = 20;
            break;
          }

          console.error('\nNo pool port found, please set environment "COINHIVE_POOL_PORT" or give a --pool-port argument to the binary\n');
          help();
          return _context2.abrupt('return');

        case 20:
          options.pool = {
            host: poolHost,
            port: poolPort,
            pass: poolPass || 'x'
          };
          stratumPoolMessage = '\n\nStratum Pool: ' + poolHost + ':' + poolPort + '\n';
          siteKeyMessage = 'Address: ' + siteKey;

        case 23:
          _context2.next = 25;
          return CoinHive(siteKey, options);

        case 25:
          miner = _context2.sent;

          miner.on('error', function (event) {
            console.log('Error:', event && event.error || JSON.stringify(event));
            process.exit(1);
          });
          _context2.next = 29;
          return miner.start();

        case 29:
          log = logger(siteKey, options);


          miner.on('update', function (data) {
            data.running = true;
            logUpdate(log(data));
          });

          if (process.stdout.isTTY) {
            _context2.next = 33;
            break;
          }

          return _context2.abrupt('return');

        case 33:

          if (process.stdin.on) {
            process.stdin.on('keypress', function () {
              var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(str, key) {
                var threads, running, auto;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        _context.next = 2;
                        return miner.rpc('getNumThreads');

                      case 2:
                        threads = _context.sent;
                        _context.next = 5;
                        return miner.rpc('isRunning');

                      case 5:
                        running = _context.sent;
                        _context.next = 8;
                        return miner.rpc('getAutoThreadsEnabled');

                      case 8:
                        auto = _context.sent;

                        if (!(str === '+')) {
                          _context.next = 13;
                          break;
                        }

                        _context.next = 12;
                        return miner.rpc('setNumThreads', [threads + 1]);

                      case 12:
                        return _context.abrupt('return');

                      case 13:
                        if (!(str === '-')) {
                          _context.next = 19;
                          break;
                        }

                        threads = threads - 1;

                        if (!(threads > 0)) {
                          _context.next = 18;
                          break;
                        }

                        _context.next = 18;
                        return miner.rpc('setNumThreads', [threads]);

                      case 18:
                        return _context.abrupt('return');

                      case 19:
                        if (!(str === 'a')) {
                          _context.next = 23;
                          break;
                        }

                        _context.next = 22;
                        return miner.rpc('setAutoThreadsEnabled', [!auto]);

                      case 22:
                        return _context.abrupt('return');

                      case 23:
                        if (!(str === 's')) {
                          _context.next = 45;
                          break;
                        }

                        if (!(running === true)) {
                          _context.next = 35;
                          break;
                        }

                        _context.next = 27;
                        return miner.stop();

                      case 27:
                        _context.t0 = logUpdate;
                        _context.t1 = log;
                        _context.next = 31;
                        return getMinerDataRpc(miner, { running: running });

                      case 31:
                        _context.t2 = _context.sent;
                        _context.t3 = (0, _context.t1)(_context.t2);
                        (0, _context.t0)(_context.t3);
                        return _context.abrupt('return');

                      case 35:
                        _context.next = 37;
                        return miner.start();

                      case 37:
                        _context.t4 = logUpdate;
                        _context.t5 = log;
                        _context.next = 41;
                        return getMinerDataRpc(miner, { running: running });

                      case 41:
                        _context.t6 = _context.sent;
                        _context.t7 = (0, _context.t5)(_context.t6);
                        (0, _context.t4)(_context.t7);
                        return _context.abrupt('return');

                      case 45:

                        if (str === 'q' || key.name === 'c' && key.ctrl) {
                          process.exit(2);
                        }

                      case 46:
                      case 'end':
                        return _context.stop();
                    }
                  }
                }, _callee, undefined);
              }));

              return function (_x, _x2) {
                return _ref2.apply(this, arguments);
              };
            }());
          }

        case 34:
        case 'end':
          return _context2.stop();
      }
    }
  }, _callee2, undefined);
}))();

var previousData = void 0;

function logger(siteKey, options) {
  return function log(data) {
    var logText = ss + "Hashes/s: " + data.hashesPerSecond.toFixed(1) + ss + "Total Hashes: " + data.totalHashes + ss + "Accepted Hashes: " + data.acceptedHashes;
    updateLog(logText);
    var t = Table([{ value: 'Hashes/s' }, { value: 'Total' }, { value: 'Accepted' }], [[data.hashesPerSecond.toFixed(1), data.totalHashes, data.acceptedHashes]]);

    return '\n' + siteKeyMessage + stratumPoolMessage + '\n' + t.render() + '\n\n' + (data.running ? spinner() : 'Stopped') + ' | Listening on ' + options.host + ':' + options.port + (options.proxy ? ' | Proxy: ' + options.proxy : '') + ' | ' + (data.threads || 0) + ' Threads' + (data.autoThreads ? ' (auto)' : '') + '\n\ns: Start/Stop | +/-: Threads | a: Auto threads | q/Ctrl-C: Quit\n    ';
  };
}

process.on('unhandledRejection', function (e) {
  console.error('An error occured', e.message);
  process.exit(1);
});

readline.emitKeypressEvents(process.stdin);

if (process.stdin.setRawMode) {
  process.stdin.setRawMode(true);
}